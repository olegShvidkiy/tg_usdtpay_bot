const channelChatId = process.env.TG_CHAT_ID;
const roomChatId = process.env.TG_CHAT_ROOM_ID;
const {getChannelInviteLink} = require("../utils/utils.js")
const Payment = require("../db/models/payment");
const Users = require("../db/models/user");
require('dotenv').config();
const getTransactionList = require("../transaction_checker");
const text = require("../../assets/text.json")
const keyboard = require("../../enums/keyboard_enum");

module.exports = {
    name: "checkPayment",
    cooldown: 30000,
    run: async (bot, message, args )=>{
        const chatId = message.chat.id;
        let payment, user;
        try{ 
            user = await Users.find({tg_id: chatId}).exec();
            payment = await Payment.find({tg_id: message.chat.id}).exec()
        }catch(err){console.log(err);}

       
        // if(user.length) {
        //     bot.sendMessage(chatId, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", keyboard.SUCCESSFUL_PAYMENT);
        //     return;
        // }
        
        if(!payment.length){
            bot.sendMessage(chatId, `–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø–ª–∞—Ç–µ–∂!`, keyboard.BEFORE_START);
            return;
        }

        const tx = await getTransactionList(payment[0]);

        if(tx){
            try {
                const tg_username = payment[0].tg_username;
                const tg_id = payment[0].tg_id;
                const tx_id = tx;
                const date = new Date();
                const expire_date = new Date(date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours()).getTime();
                
                //–µ—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                if(user.length){
                    let userExpireDate = new Date(user[0].expire_date).getTime() + 30*24*60*60*1000;
                    const res = await Users.updateOne({tg_id: user[0].tg_id},{expire_date: userExpireDate}); 
                    await Payment.deleteOne({tg_id}).exec();    
                    bot.sendMessage(process.env.TG_NOTIFICATION_CHAT_ID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${tg_username ? `@${tg_username}` : `c id: ${tg_id}`} —É—Å–ø–µ—à–Ω–æ –ü–†–û–î–õ–ò–õ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü! Hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx_id}`);
                    bot.sendMessage(chatId, `üëç–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π!\n –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!`, keyboard.SUCCESSFUL_PAYMENT);
                    return;
                }

                bot.unbanChatMember(channelChatId, tg_id, {only_if_banned: true}); //–µ—Å–ª–∏ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ, —Ç–æ –Ω–∞–¥–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å, —á—Ç–æ–± –º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ 
                bot.unbanChatMember(roomChatId, tg_id, {only_if_banned: true});
                bot.sendMessage(process.env.TG_NOTIFICATION_CHAT_ID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${tg_username} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É! Hash —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx_id}`);

                const newUser = new Users({tg_id, tx_id, tg_username, expire_date}); 
                await newUser.save();
                await Payment.deleteOne({tg_id}).exec();

                const link = await getChannelInviteLink(bot,channelChatId);
                const chat_link = await getChannelInviteLink(bot, process.env.TG_CHAT_ROOM_ID);
                bot.sendMessage(chatId, `üëç–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç( —Å—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 30—Ç–∏ –º–∏–Ω—É—Ç ):\n[Cc—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª](${link})\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç](${chat_link})`, keyboard.SUCCESSFUL_PAYMENT);
                bot.sendMessage(chatId, text.rulesText);
                
            } catch (err) {console.log(err)}
        }else{
            bot.sendMessage(chatId, `–ü–ª–∞—Ç–µ–∂ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–∏ –≤—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É! –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @help_process`)
        }
    }
}